import { test, expect } from '@playwright/test';
const env = require('../config/env.config');

test('Facultad - Emitir Resoluci√≥n de Aprobaci√≥n de Tesis', async ({ page }) => {
  test.setTimeout(120000);
  
  console.log('üåê Navegando a p√°gina de login...');
  await page.goto(`${env.BASE_URL}/login`);
  await page.waitForLoadState('networkidle');
  
  // ========== PASO 1: LOGIN COMO FACULTAD ==========
  console.log('üèõÔ∏è Iniciando sesi√≥n como Facultad (FING)...');
  
  console.log('üìß Llenando email de Facultad...');
  await page.getByRole('textbox', { name: 'Correo electr√≥nico' }).fill(env.FACULTAD_EMAIL);
  
  console.log('üîê Llenando contrase√±a de Facultad...');
  await page.getByRole('textbox', { name: 'Contrase√±a' }).fill(env.FACULTAD_PASSWORD);
  
  console.log('üîë Haciendo click en "Iniciar Sesi√≥n"...');
  await page.getByRole('button', { name: 'Iniciar Sesi√≥n' }).click();
  
  console.log('üîÑ Esperando redirecci√≥n post-login...');
  await page.waitForURL(/localhost:5173\/(?!login)/, { timeout: 30000 });
  await page.waitForLoadState('networkidle');
  
  // Esperar redirecciones autom√°ticas de Facultad
  let previousUrl = '';
  let currentUrl = page.url();
  let redirectCount = 0;
  const maxRedirects = 5;
  
  while (previousUrl !== currentUrl && redirectCount < maxRedirects) {
    previousUrl = currentUrl;
    console.log(`‚è≥ Esperando redirecciones autom√°ticas de Facultad (${redirectCount + 1}/${maxRedirects})...`);
    
    try {
      await Promise.race([
        page.waitForURL(url => url.toString() !== previousUrl, { timeout: 2000 }),
        page.waitForTimeout(2000)
      ]);
    } catch (e) {
      // Timeout es normal
    }
    
    currentUrl = page.url();
    redirectCount++;
    
    if (currentUrl !== previousUrl) {
      console.log(`üîÄ Redirecci√≥n detectada: ${currentUrl}`);
    }
  }
  
  const facultadUrl = page.url();
  console.log(`üìç URL final de Facultad: ${facultadUrl}`);
  
  // üî• IMPORTANTE: Dar tiempo a que los datos del test anterior se reflejen en la BD
  console.log('‚è≥ Esperando a que los datos del proceso anterior se reflejen en la base de datos...');
  await page.waitForTimeout(2000);
  
  // ========== PASO 2: NAVEGAR A EMITIR RESOLUCI√ìN DE APROBACI√ìN (SI ES NECESARIO) ==========
  console.log('üìã Verificando si necesitamos navegar a Emitir Resoluci√≥n de Aprobaci√≥n...');
  
  if (!facultadUrl.includes('emitir-resolucion-aprobacion')) {
    console.log('ÔøΩ No estamos en la p√°gina de aprobaci√≥n, buscando bot√≥n de navegaci√≥n...');
    
    // Buscar y hacer clic en el bot√≥n "Emitir Resoluci√≥n de aprobaci√≥n"
    const navegarAprobacionBtn = page.getByRole('button', { name: 'Emitir Resoluci√≥n de aprobaci' });
    const isVisible = await navegarAprobacionBtn.isVisible().catch(() => false);
    
    if (isVisible) {
      console.log('‚úÖ Bot√≥n de navegaci√≥n encontrado, haciendo clic...');
      await navegarAprobacionBtn.click();
      await page.waitForLoadState('networkidle');
      await page.waitForTimeout(1000); // Esperar que cargue la tabla
    } else {
      console.log('‚ö†Ô∏è Bot√≥n no visible, navegando directamente por URL...');
      await page.goto(`${env.BASE_URL}/facultad/emitir-resolucion-aprobacion`);
      await page.waitForLoadState('networkidle');
      await page.waitForTimeout(1000); // Esperar que cargue la tabla
    }
  } else {
    console.log('‚úÖ Ya estamos en la p√°gina de emisi√≥n de resoluci√≥n de aprobaci√≥n');
    await page.waitForTimeout(1000); // Esperar que cargue la tabla
  }
  
  // ========== PASO 3: EMITIR RESOLUCI√ìN DE APROBACI√ìN ==========
  console.log('üìã Emitiendo resoluci√≥n de aprobaci√≥n de tesis...');
  
  // Tomar screenshot antes de emitir resoluci√≥n
  console.log('üì∏ Tomando screenshot de la tabla...');
  await page.screenshot({ path: 'tests/screenshots/antes-facultad-emitir-resolucion-aprobacion.png', fullPage: true });
  
  // Verificar si ya estamos en el modal o necesitamos buscar el bot√≥n en la tabla
  const modalVisible = await page.getByRole('button', { name: 'Aprobar' }).isVisible().catch(() => false);
  
  if (!modalVisible) {
    console.log('üîç Buscando bot√≥n "Emitir Resoluci√≥n de aprobaci√≥n" en la tabla...');
    
    // Buscar bot√≥n en la tabla (primera fila con estado pendiente)
    const emitirResolucionBtn = page.getByRole('button', { name: 'Emitir Resoluci√≥n de aprobaci' }).first();
    await emitirResolucionBtn.waitFor({ state: 'visible', timeout: 15000 });
    
    console.log('üìù Haciendo click en "Emitir Resoluci√≥n de aprobaci√≥n"...');
    await emitirResolucionBtn.click();
    await page.waitForTimeout(300);
  } else {
    console.log('‚úÖ Ya estamos en el modal de emisi√≥n de resoluci√≥n');
  }
  
  // ========== PASO 4: APROBAR SOLICITUD ==========
  console.log('‚úÖ Aprobando solicitud...');
  const aprobarBtn = page.getByRole('button', { name: 'Aprobar' });
  await aprobarBtn.waitFor({ state: 'visible', timeout: 5000 });
  await aprobarBtn.click();
  await page.waitForTimeout(300);
  
  // ========== PASO 5: LLENAR N√öMERO DE RESOLUCI√ìN ==========
  console.log('üìÑ Llenando n√∫mero de resoluci√≥n...');
  const resolucionInput = page.getByRole('textbox', { name: 'Ej:' });
  await resolucionInput.waitFor({ state: 'visible', timeout: 5000 });
  await resolucionInput.fill(env.RESOLUCION_APROBACION);
  
  // Tomar screenshot antes de tramitar
  console.log('üì∏ Tomando screenshot antes de tramitar resoluci√≥n de aprobaci√≥n...');
  await page.screenshot({ path: 'tests/screenshots/antes-tramitar-resolucion-aprobacion.png', fullPage: true });
  
  // ========== PASO 6: TRAMITAR RESOLUCI√ìN ==========
  console.log('‚úÖ Haciendo click en "Tramitar Resoluci√≥n"...');
  const tramitarResolucionBtn = page.getByRole('button', { name: 'Tramitar Resoluci√≥n' });
  await tramitarResolucionBtn.waitFor({ state: 'visible', timeout: 5000 });
  await tramitarResolucionBtn.click();
  
  // Confirmar tramitaci√≥n
  console.log('‚úÖ Confirmando tramitaci√≥n de resoluci√≥n...');
  await page.waitForTimeout(300);
  await page.getByRole('button', { name: 'S√≠, Tramitar' }).click();
  
  // Primera confirmaci√≥n - "Continuar"
  console.log('‚úÖ Aceptando primera confirmaci√≥n...');
  await page.waitForTimeout(500);
  await page.getByRole('button', { name: 'Continuar' }).click();
  
  // Confirmaci√≥n final - "Perfecto"
  console.log('‚úÖ Aceptando confirmaci√≥n final...');
  await page.waitForTimeout(500);
  await page.getByRole('button', { name: 'Perfecto' }).click();
  
  console.log('üéâ ¬°TEST COMPLETADO EXITOSAMENTE!');
  console.log('‚úÖ Facultad emiti√≥ resoluci√≥n de aprobaci√≥n de tesis');
  console.log(`‚úÖ N√∫mero de resoluci√≥n: ${env.RESOLUCION_APROBACION}`);
  console.log('üéì ¬°FLUJO COMPLETO DE TESIS FINALIZADO!');
  await page.screenshot({ path: 'tests/screenshots/facultad-resolucion-aprobacion-success.png', fullPage: true });
});
